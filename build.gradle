buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://libraries.minecraft.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

group = "knightminer"
archivesBaseName = "Inspirations"
// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    deployerJars
}

//adds the build number to the end of the version string if on a build server
def mod_build = mod_version
if (System.getenv().BUILD_NUMBER != null) {
	mod_build += ".${System.getenv().BUILD_NUMBER}"
}
version = "${minecraft_version}-${mod_build}"

sourceSets {
    main {
        resources {
            srcDirs 'src/generated/resources'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}

minecraft {
	mappings channel: 'snapshot', version: mappings_version

    accessTransformer project.file("src/main/resources/META-INF/accesstransformer.cfg")

     runs {
         client {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }

         server {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }

         data {
             workingDirectory project.file('run')

             // Recommended logging data for a userdev environment
             property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

             // Recommended logging level for the console
             property 'forge.logging.console.level', 'debug'

             args '--mod', 'inspirations', '--all', '--output', file('src/generated/resources/')

             mods {
                 inspirations {
                     source sourceSets.main
                 }
             }
         }
     }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { // Vanilla
        name 'Vanilla'
        url 'https://libraries.minecraft.net/'
    }
    maven { // Forge
        name 'ForgeFS'
        url 'https://maven.minecraftforge.net/'
    }
    maven { // Mantle and JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
	maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")

    // rats plugin
    //runtimeOnly fg.deobf("curse.maven:citadel:2992577")
    //runtimeOnly fg.deobf("curse.maven:rats:3041056")
}

// process mods.toml to inject variables
def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'version':          mod_build,
                'loader_range':    loader_range,
                'minecraft_range': minecraft_range,
                'forge_range':     forge_range,
                'mantle_range':    mantle_range
    }
}
// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
    "$rootDir/out/production/resources", // IDEA
    "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Inspirations",
            "Specification-Vendor": "KnightMiner",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor": "KnightMiner",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}