buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "knightminer"
archivesBaseName = "Inspirations"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

version = "${config.minecraft_version}-${config.mod_version}"
//adds the build number to the end of the version string if on a build server
if (System.getenv().BUILD_NUMBER != null) {
	version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
	mappings = config.mappings
    runDir = "run"
    replace '${version}', project.version
}

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

repositories {
    maven { // Mantle and JEI
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
	maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
	maven { // WAILA
         name "Tehnut Maven FS"
         url "http://tehnut.info/maven"
    }
}

dependencies {
    deobfCompile "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}"
    deobfCompile "slimeknights.mantle:Mantle:${config.minecraft_base_version}-${config.mantle_version}"
    deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla_version}"
    deobfCompile("mcjty.theoneprobe:TheOneProbe-1.12:${config.probe_version}") {
        exclude group: 'cofh' // don't grab redstone flux too, don't use it
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Add Access Transformers Manifest
jar {
    manifest {
        attributes 'FMLAT': 'inspirations_at.cfg'
    }
    
    finalizedBy reobfJar
}

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}